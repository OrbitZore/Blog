<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://z3475.work</id>
    <title>Gridea</title>
    <updated>2020-12-24T04:59:52.232Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://z3475.work"/>
    <link rel="self" href="https://z3475.work/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://z3475.work/images/avatar.png</logo>
    <icon>https://z3475.work/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[我的ACM比赛用代码模板]]></title>
        <id>https://z3475.work/post/wo-de-acm-bi-sai-yong-dai-ma-mo-ban/</id>
        <link href="https://z3475.work/post/wo-de-acm-bi-sai-yong-dai-ma-mo-ban/">
        </link>
        <updated>2020-12-24T04:45:49.000Z</updated>
        <content type="html"><![CDATA[<p>此文章用于总结在日常训练以及比赛时积累的可复用常见代码，以及可以加速代码书写的一些模板。</p>
<h3 id="面向c11标准版本">面向C++11标准版本</h3>
<p>Features</p>
<ul>
<li>定义了比赛常用long long,vector的简化名称</li>
<li>用于输出日志进行代码差错及运行分析的debug()函数（配合编译参数-DLOCAL食用）</li>
<li>常用的cmax和cmin函数</li>
<li>gcd的实现</li>
<li>快速读入一个整数gi()</li>
<li>简单的矢量类</li>
</ul>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;
typedef tuple&lt;int,int&gt; tii;
typedef tuple&lt;ll,ll&gt; tll;
typedef vector&lt;int&gt; vi;
typedef vector&lt;ll&gt; vll;
typedef vector&lt;tii&gt; vtii;
typedef vector&lt;tll&gt; vtll;
typedef vector&lt;vector&lt;int&gt;&gt; vvi;
#define INF 0x3f3f3f3f
#define X(t) get&lt;0&gt;(t)
#define Y(t) get&lt;1&gt;(t)
#define Z(t) get&lt;2&gt;(t)
#define pb push_back
#define dlt decltype
#define debug(...) _debug(#__VA_ARGS__, __VA_ARGS__)
#ifdef LOCAL
constexpr const bool local=true;
#else
constexpr const bool local=false;
#endif
 
template &lt;typename T&gt;
void _debug(const char* format,const T t) {
    if (local) cerr &lt;&lt; format &lt;&lt; '=' &lt;&lt; t &lt;&lt; endl;
}

template &lt;class First, class... Rest&gt;
void _debug(const char* format,const First first,const Rest... rest) {
    if (local){
        while (*format != ',') cerr &lt;&lt; *format++;
        cerr &lt;&lt; '=' &lt;&lt; first &lt;&lt; &quot;,&quot;;
        _debug(format + 1, rest...);    
    }
}

template &lt;typename T&gt;
ostream&amp; operator&lt;&lt;(ostream&amp; os, const vector&lt;T&gt;&amp; V) {
    if (local) os &lt;&lt; &quot;[&quot;;
    for (const auto&amp; vv : V) os &lt;&lt; vv &lt;&lt; &quot; &quot;;
    if (local) os &lt;&lt; &quot;]&quot;;
    return os;
}

template&lt;class Tuple,size_t N&gt;
struct TuplePrinter {
    static void print(ostream&amp; os,const Tuple&amp; t) {
        TuplePrinter&lt;Tuple, N-1&gt;::print(os,t);
        os &lt;&lt; &quot; &quot; &lt;&lt; get&lt;N-1&gt;(t);
    }
};
template&lt;class Tuple&gt;
struct TuplePrinter&lt;Tuple,1&gt;{
    static void print(ostream&amp; os,const Tuple&amp; t) {
    	os &lt;&lt; get&lt;0&gt;(t);
    }
};
 
template&lt;typename... Rest&gt;
ostream&amp; operator&lt;&lt;(ostream&amp; os, const tuple&lt;Rest...&gt;&amp; V) {
    if (local) os &lt;&lt; &quot;(&quot;;
	TuplePrinter&lt;decltype(V),sizeof...(Rest)&gt;::print(os,V);
    if (local) os &lt;&lt; &quot;)&quot;;
    return os;
}
template&lt;class T1,class T2&gt;
bool cmin(T1 &amp;a,const T2 b){return a&gt;b?a=b,1:0;}
template&lt;class T1,class T2&gt;
bool cmax(T1 &amp;a,const T2 b){return a&lt;b?a=b,1:0;}
template&lt;class T1,class T2,class ...T3&gt;
bool cmin(T1 &amp;a,const T2 b,const T3 ...rest){return cmin(a,b)|cmin(a,rest...);}
template&lt;class T1,class T2,class ...T3&gt;
bool cmax(T1 &amp;a,const T2 b,const T3 ...rest){return cmax(a,b)|cmax(a,rest...);}
 
ll _gcd(ll a,ll b){return b==0?a:_gcd(b,a%b);}
ll gcd(ll a,ll b){if (a&lt;b) swap(a,b);return _gcd(a,b);}
ll gi(){
    ll i=0;bool f=false;char c;
    while (!isdigit(c=cin.get())&amp;&amp;cin.good()) f=c=='-';
    if (!cin.good()) return 0;
    do i=(i&lt;&lt;3)+(i&lt;&lt;1)+c-'0'; while (isdigit(c=cin.get()));
    return f?-i:i;
}

struct point{
    double x, y;
    point(double x =0,double y=0):x(x),y(y){}
    point operator +(const point &amp;o) {return point(x+o.x, y+o.y);}
    point operator -(const point &amp;o) {return point(x-o.x,y-o.y);}
    point operator *(const double &amp;o) {return point(x*o,y*o);}
    point operator /(const double &amp;o) {return point(x/o,y/o);}
};
double len2(const point &amp;a){return a.x*a.x+a.y*a.y;}
double len(const point &amp;a){return sqrt(len2(a));}
double dot(const point &amp;a,const point &amp;b){return a.x*b.x+a.y*b.y;}
double crs(const point &amp;a,const point &amp;b){return a.x*b.y-a.y*b.x;}

struct solution{
    
    solution(){
        
    }
    
    void solve(){
        
    }
};
int main(){
	ios::sync_with_stdio(false);
	int T=gi();
	while (T--&amp;&amp;cin.good()){
		[](){
			solution().solve();
		}();
	}
}
</code></pre>
<h3 id="面向c14标准版本">面向C++14+标准版本</h3>
<p>Feature</p>
<ul>
<li>添加Y算子，完善函数式编程支持</li>
</ul>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;
typedef tuple&lt;int,int&gt; tii;
typedef tuple&lt;ll,ll&gt; tll;
typedef vector&lt;int&gt; vi;
typedef vector&lt;ll&gt; vll;
typedef vector&lt;tii&gt; vtii;
typedef vector&lt;tll&gt; vtll;
typedef vector&lt;vector&lt;int&gt;&gt; vvi;
#define INF 0x3f3f3f3f
#define X(t) get&lt;0&gt;(t)
#define Y(t) get&lt;1&gt;(t)
#define Z(t) get&lt;2&gt;(t)
#define pb push_back
#define dlt decltype
#define debug(...) _debug(#__VA_ARGS__, __VA_ARGS__)
#ifdef LOCAL
constexpr const bool local=true;
#else
constexpr const bool local=false;
#endif
 
template &lt;typename T&gt;
void _debug(const char* format,const T t) {
    if (local) cerr &lt;&lt; format &lt;&lt; '=' &lt;&lt; t &lt;&lt; endl;
}

template &lt;class First, class... Rest&gt;
void _debug(const char* format,const First first,const Rest... rest) {
    if (local){
        while (*format != ',') cerr &lt;&lt; *format++;
        cerr &lt;&lt; '=' &lt;&lt; first &lt;&lt; &quot;,&quot;;
        _debug(format + 1, rest...);    
    }
}

template &lt;typename T&gt;
ostream&amp; operator&lt;&lt;(ostream&amp; os, const vector&lt;T&gt;&amp; V) {
    if (local) os &lt;&lt; &quot;[&quot;;
    for (const auto&amp; vv : V) os &lt;&lt; vv &lt;&lt; &quot; &quot;;
    if (local) os &lt;&lt; &quot;]&quot;;
    return os;
}

template&lt;class Tuple,size_t N&gt;
struct TuplePrinter {
    static void print(ostream&amp; os,const Tuple&amp; t) {
        TuplePrinter&lt;Tuple, N-1&gt;::print(os,t);
        os &lt;&lt; &quot; &quot; &lt;&lt; get&lt;N-1&gt;(t);
    }
};
template&lt;class Tuple&gt;
struct TuplePrinter&lt;Tuple,1&gt;{
    static void print(ostream&amp; os,const Tuple&amp; t) {
    	os &lt;&lt; get&lt;0&gt;(t);
    }
};
 
template&lt;typename... Rest&gt;
ostream&amp; operator&lt;&lt;(ostream&amp; os, const tuple&lt;Rest...&gt;&amp; V) {
    if (local) os &lt;&lt; &quot;(&quot;;
	TuplePrinter&lt;decltype(V),sizeof...(Rest)&gt;::print(os,V);
    if (local) os &lt;&lt; &quot;)&quot;;
    return os;
}
template&lt;class T1,class T2&gt;
bool cmin(T1 &amp;a,const T2 b){return a&gt;b?a=b,1:0;}
template&lt;class T1,class T2&gt;
bool cmax(T1 &amp;a,const T2 b){return a&lt;b?a=b,1:0;}
template&lt;class T1,class T2,class ...T3&gt;
bool cmin(T1 &amp;a,const T2 b,const T3 ...rest){return cmin(a,b)|cmin(a,rest...);}
template&lt;class T1,class T2,class ...T3&gt;
bool cmax(T1 &amp;a,const T2 b,const T3 ...rest){return cmax(a,b)|cmax(a,rest...);}
 
ll _gcd(ll a,ll b){return b==0?a:_gcd(b,a%b);}
ll gcd(ll a,ll b){if (a&lt;b) swap(a,b);return _gcd(a,b);}
ll gi(){
    ll i=0;bool f=false;char c;
    while (!isdigit(c=cin.get())&amp;&amp;cin.good()) f=c=='-';
    if (!cin.good()) return 0;
    do i=(i&lt;&lt;3)+(i&lt;&lt;1)+c-'0'; while (isdigit(c=cin.get()));
    return f?-i:i;
}

struct point{
    double x, y;
    point(double x =0,double y=0):x(x),y(y){}
    point operator +(const point &amp;o) {return point(x+o.x, y+o.y);}
    point operator -(const point &amp;o) {return point(x-o.x,y-o.y);}
    point operator *(const double &amp;o) {return point(x*o,y*o);}
    point operator /(const double &amp;o) {return point(x/o,y/o);}
};
double len2(const point &amp;a){return a.x*a.x+a.y*a.y;}
double len(const point &amp;a){return sqrt(len2(a));}
double dot(const point &amp;a,const point &amp;b){return a.x*b.x+a.y*b.y;}
double crs(const point &amp;a,const point &amp;b){return a.x*b.y-a.y*b.x;}

template &lt;typename F&gt;
struct Y{
    Y(F f) :_f(f){}
    template &lt;typename... Args&gt;
    auto operator()(Args&amp;&amp;... t) const{
        return _f(*this, std::forward&lt;Args&gt;(t)...);
    }
    F _f;
};
template &lt;typename F&gt;
Y&lt;F&gt; fix(F&amp;&amp; f){
    return Y&lt;F&gt;(forward&lt;F&gt;(f));
}

int main(){
	ios::sync_with_stdio(false);
	int T=gi();
	while (T--&amp;&amp;cin.good()){
		[](){
			
		}();
	}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HNUSTnet项目开发记录]]></title>
        <id>https://z3475.work/post/hnustnet-xiang-mu-kai-fa-ji-lu/</id>
        <link href="https://z3475.work/post/hnustnet-xiang-mu-kai-fa-ji-lu/">
        </link>
        <updated>2020-12-24T04:27:30.000Z</updated>
        <content type="html"><![CDATA[<p>项目地址：<strong><a href="https://github.com/OrbitZore/HNUSTnet">OrbitZore/HNUSTnet</a></strong></p>
<p>因为湖科大的校园网存在莫名其妙的失去登录状态的问题，于是想写个项目解决。🤔</p>
<p>加上最近读《Effective C++》，想要考验一下自己的C++水平。于是就决定用C++实现。👏</p>
<p>粗略想了下技术栈。因为想体验一下跨平台，于是就上了<code>cmake</code>编译，附带使用<code>boost::asio</code>作为跨平台网络库。这样一个大体的框架就被敲定了，剩下就是艰难的实现过程了。</p>
<p>但在实现的过程中遇到了麻烦的编码问题。想要代码跨平台，字符常量最好使用UTF-8编码（代码内使用u8&quot;&quot;声明一个字符串常量）。但是TCP上的HTTP传输内容编码为GB2312。考虑再三。舍弃掉代码内字符串分开编码的方案，使用<code>Iconv</code>这一C库将GB2312转换为UTF-8。</p>
<h3 id="cmake">CMake</h3>
<h4 id="cmakeliststxt">CMakeLists.txt</h4>
<p>在命令行中运行<code>cmake &lt;DIR&gt;</code>，<code>cmake</code>会检查目录下的<code>CMakeLists.txt</code>。并解释执行<code>CMakeLists.txt</code>内容。</p>
<h4 id="声明项目名">声明项目名</h4>
<pre><code class="language-cmake">project (&lt;Project Name&gt;)
</code></pre>
<h4 id="包含子项目">包含子项目</h4>
<pre><code class="language-cmake">add_subdirectory (&lt;DIR&gt;)
</code></pre>
<p>CMake会寻找目录下<code>CMakeLists.txt</code>，类似调用函数一样的调用解释执行此<code>CMakeLists.txt</code>。</p>
<h4 id="在项目中引入外部库">在项目中引入外部库</h4>
<h5 id="寻找外部库">寻找外部库</h5>
<p><strong>库名一律首字母大写其他小写</strong></p>
<pre><code class="language-cmake">find_package(&lt;name&gt;)
</code></pre>
<p>适用于一些C库<code>Threads</code>,<code>Iconv</code>等</p>
<p><code>Boost</code>依赖<code>Threads</code></p>
<pre><code class="language-cmake">find_package(&lt;name&gt; COMPONENTS &lt;lib1&gt; [lib2 ...])
</code></pre>
<p>像<code>Boost</code>这种包含很多子库的大库来说，为了避免引入不必要的库使编译缓慢。在寻找时指出子库成为了一个好选择。</p>
<p>本项目寻找<code>Boost::system</code>以解决<code>Boost::Asio</code>依赖问题</p>
<p>适用于一些大型C++库</p>
<pre><code class="language-cmake">find_path(BOOST_ASIO_INCLUDE_DIRS &quot;boost/asio.hpp&quot;)
</code></pre>
<p>本项目会用到<code>Boost.Asio</code>，其为<code>Headers Only</code>类型的库。引入时只需Include头文件就行。这个语句作用为寻找Asio的头文件<code>boost/asio.hpp</code>，并将其目录赋值给BOOST_ASIO_INCLUDE_DIRS变量</p>
<p><code>find_package</code>会在一些目录中寻找<code>&lt;name&gt;.cmake</code>的文件（其实还有找很多其他文件，因不在本项目内所以略过，可参考<a href="https://zhuanlan.zhihu.com/p/97369704">Cmake之深入理解find_package()的用法</a>），其包含了寻找<code>&lt;name&gt;</code>这个库并引入到cmake的步骤。一般会初始化<code>&lt;name&gt;_INCLUDE_DIRS</code>、<code>&lt;name&gt;_LIBRARY_DIRS</code>和<code>&lt;name&gt;_FOUND</code>这三个常量。含义分别为这个库的头文件目录，<code>*.obj</code>目录，库是否找到了。</p>
<p>某些<code>&lt;name&gt;.cmake</code>会检查一些关于需要引用库的设置变量。本项目即用到了<code>Boost_USE_STATIC_LIBS</code>等，均可在下文介绍的文档中查询。</p>
<p>CMake中已经包含了一些热门库的<code>&lt;name&gt;.cmake</code>文件，本项目中所有库均为如此。官方文档地址<a href="https://cmake.org/cmake/help/v3.19/manual/cmake-modules.7.html#find-modules">cmake-modules(7) — CMake 3.19.1 Documentation</a>。</p>
<h5 id="引入头文件">引入头文件</h5>
<p>以下做法将会把头文件引入所有子项目。因本项目仅包含一个子项目所以此法可行。如多个子项目可使用<code>target_</code>系列函数。</p>
<pre><code class="language-cmake">include_directories(&lt;DIRS1&gt; [DIRS2 ...])
</code></pre>
<h5 id="引入obj文件">引入<code>*.obj</code>文件</h5>
<p>以下做法将会把<code>*.obj</code>文件引入所有子项目。因本项目仅包含一个子项目所以此法可行。如多个子项目可使用<code>target_</code>系列函数。</p>
<pre><code class="language-cmake">link_libraries([item1 [item2 [...]]]
               [[debug|optimized|general] &lt;item&gt;] ...)
</code></pre>
<h3 id="添加源代码和头文件至项目">添加源代码和头文件至项目</h3>
<pre><code class="language-cmake">add_executable (HNUSTnet &lt;sources1&gt; [sources2])
</code></pre>
<h2 id="项目源代码文件说明">项目源代码文件说明</h2>
<table>
<thead>
<tr>
<th>源代码文件名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>misc.cpp</td>
<td>提供一些工具函数</td>
</tr>
<tr>
<td>iconv.hpp</td>
<td>提供Iconv的C++封装 by Yuya Unno</td>
</tr>
<tr>
<td>TCPclient.cpp</td>
<td>基于Boost::Asio抽象TCP连接</td>
</tr>
<tr>
<td>HTTPclient.cpp</td>
<td>基于TCPclient.cpp提供简单的HTTP封装，并使用iconv.hpp转码</td>
</tr>
<tr>
<td>HNUSTnet.cpp</td>
<td>基于HTTPclient.cpp提供login.hnust.cn的API封装，并提供自动连接操作</td>
</tr>
<tr>
<td>main.cpp</td>
<td>命令行程序化HNUSTnet.cpp</td>
</tr>
</tbody>
</table>
<h2 id="依赖库相关资料">依赖库相关资料</h2>
<p><a href="https://think-async.com/Asio/boost_asio_1_18_0/doc/html/boost_asio/reference.html">Boost::Asio官方文档</a></p>
<p>u1s1这官方文档比CPP reference难读多了..</p>
<p><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3388.pdf">Using Asio with C++11</a></p>
<p>介绍Asio的简单使用</p>
<p><a href="https://www.boost.org/doc/libs/1_74_0/">Boost</a></p>
<p>Boost的各个子库</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://z3475.work/post/hello-gridea/</id>
        <link href="https://z3475.work/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>